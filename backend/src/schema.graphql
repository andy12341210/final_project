type Query {
    Room(_id: ID!): Room
}

type Room {
    _id:ID!
    isFull: Boolean
    isStarted: Boolean
    playerAmount: Int
    currentDice: Int
    currentPlayer: Int
    mapStatus: [[Int]]
    players: [Player!]
}

type Player {
    _id: String!
    name: String!
    isPrepared: Boolean!
    character: Int!
    money : Int!
    position: Int!
    isStop: Int!
}

input PlayersInput {
    _id: String
    name: String
    isPrepared: Boolean
    character: Int
    money : Int
    position: Int
    isStop: Int
}


type EventMessage {
    join: [Int!]
    message: String!
}

type ReactionMessage {
    join: [Int!]
    message: String!
    money: Int!
}

type NewPlayer {
    _id:ID!
    name:String!
}

type Mutation {
    joinRoom( _id: ID!, name: String! ): Room
    leaveRoom( _id: ID!, pos: Int! ): Room
    createPlayer( name:String!): NewPlayer!
    upDatePlayers( players: [PlayersInput], _id: ID ): Room
    upDateRoomState( mapStatus:[[Int]], currentPlayer:Int , _id:ID ): Room
    deleteRoom(_id:ID): Room
}

type endGameOutPut {
    IsEnd: Boolean
}

type Subscription {
    playerUpdate( _id:ID! ): [Player]
    roomStateUpdate( _id:ID! ): Room
    endGame(_id:ID!): endGameOutPut
}